#!/bin/env python

"""Script to create prototype schema for L1 tables.

This is based initially on baseline schema from `cat` package, but it may
be modified as prototype evolves.
"""

#--------------------------------
#  Imports of standard modules --
#--------------------------------
from argparse import ArgumentParser
import logging
import sys

#-----------------------------
# Imports for other modules --
#-----------------------------
from lsst.db import engineFactory
from sqlalchemy import MetaData, Table, Column, PrimaryKeyConstraint, Index
import sqlalchemy.types

#---------------------
# Local definitions --
#---------------------

def _configLogger(verbosity):
    """ configure logging based on verbosity level """

    levels = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    logfmt = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"

    logging.basicConfig(level=levels.get(verbosity, logging.DEBUG), format=logfmt)


#---------------------------------
#  Application class definition --
#---------------------------------

def main():

    descr = 'Create schema for L1 database.'
    parser = ArgumentParser(description=descr)
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='More verbose output, can use several times.')
    parser.add_argument('--drop', action='store_true', default=False,
                        help='Drop existing schema first, this will delete '
                        'all data in the tables, use with extreme caution')
    parser.add_argument('-c', '--config', default="l1db.cfg",
                        help='Name of the config file, def: l1db.cfg')
    args = parser.parse_args()

    # configure logging
    _configLogger(args.verbose)

    # instantiate db engine
    engine = engineFactory.getEngineFromFile(args.config)
    logging.info('engine name={} driver={}'.format(engine.name, engine.driver))

    # metadata (DDL) instance
    metadata = MetaData(engine)
    mysql_engine = 'InnoDB'

    # type aliases
    DOUBLE = make_doube_type(engine)
    FLOAT = sqlalchemy.types.Float
    DATETIME = sqlalchemy.types.TIMESTAMP
    BIGINT = sqlalchemy.types.BigInteger
    INTEGER = INT = sqlalchemy.types.Integer
    BLOB = sqlalchemy.types.BLOB
    CHAR = sqlalchemy.types.CHAR

    diaObject = Table('DiaObject', metadata,
        Column('diaObjectId', BIGINT, nullable=False),
        Column('validityStart', DATETIME, nullable=False),
        Column('validityEnd', DATETIME, nullable=False),
        Column('ra', DOUBLE, nullable=False),
        Column('decl', DOUBLE, nullable=False),
        Column('raSigma', FLOAT, nullable=False),
        Column('declSigma', FLOAT, nullable=False),
        Column('ra_decl_Cov', FLOAT, nullable=False),
        Column('muRa', FLOAT, nullable=False),
        Column('muRaSigma', FLOAT, nullable=False),
        Column('muDecl', FLOAT, nullable=False),
        Column('muDecSigma', FLOAT, nullable=False),
        Column('muRa_muDeclCov', FLOAT, nullable=False),
        Column('parallax', FLOAT, nullable=False),
        Column('parallaxSigma', FLOAT, nullable=False),
        Column('muRa_parallax_Cov', FLOAT, nullable=False),
        Column('muDecl_parallax_Cov', FLOAT, nullable=False),
        Column('lnL', FLOAT, nullable=False),
        Column('chi2', FLOAT, nullable=False),
        Column('N', INT, nullable=False),
        Column('uPSFlux', FLOAT, nullable=True),
        Column('uPSFluxErr', FLOAT, nullable=True),
        Column('uPSFluxSigma', FLOAT, nullable=True),
        Column('uFPFlux', FLOAT, nullable=True),
        Column('uFPFluxErr', FLOAT, nullable=True),
        Column('uFPFluxSigma', FLOAT, nullable=True),
        Column('gPSFlux', FLOAT, nullable=True),
        Column('gPSFluxErr', FLOAT, nullable=True),
        Column('gPSFluxSigma', FLOAT, nullable=True),
        Column('gFPFlux', FLOAT, nullable=True),
        Column('gFPFluxErr', FLOAT, nullable=True),
        Column('gFPFluxSigma', FLOAT, nullable=True),
        Column('rPSFlux', FLOAT, nullable=True),
        Column('rPSFluxErr', FLOAT, nullable=True),
        Column('rPSFluxSigma', FLOAT, nullable=True),
        Column('rFPFlux', FLOAT, nullable=True),
        Column('rFPFluxErr', FLOAT, nullable=True),
        Column('rFPFluxSigma', FLOAT, nullable=True),
        Column('iPSFlux', FLOAT, nullable=True),
        Column('iPSFluxErr', FLOAT, nullable=True),
        Column('iPSFluxSigma', FLOAT, nullable=True),
        Column('iFPFlux', FLOAT, nullable=True),
        Column('iFPFluxErr', FLOAT, nullable=True),
        Column('iFPFluxSigma', FLOAT, nullable=True),
        Column('zPSFlux', FLOAT, nullable=True),
        Column('zPSFluxErr', FLOAT, nullable=True),
        Column('zPSFluxSigma', FLOAT, nullable=True),
        Column('zFPFlux', FLOAT, nullable=True),
        Column('zFPFluxErr', FLOAT, nullable=True),
        Column('zFPFluxSigma', FLOAT, nullable=True),
        Column('yPSFlux', FLOAT, nullable=True),
        Column('yPSFluxErr', FLOAT, nullable=True),
        Column('yPSFluxSigma', FLOAT, nullable=True),
        Column('yFPFlux', FLOAT, nullable=True),
        Column('yFPFluxErr', FLOAT, nullable=True),
        Column('yFPFluxSigma', FLOAT, nullable=True),
        Column('uLcPeriodic', BLOB, nullable=True),
        Column('gLcPeriodic', BLOB, nullable=True),
        Column('rLcPeriodic', BLOB, nullable=True),
        Column('iLcPeriodic', BLOB, nullable=True),
        Column('zLcPeriodic', BLOB, nullable=True),
        Column('yLcPeriodic', BLOB, nullable=True),
        Column('uLcNonPeriodic', BLOB, nullable=True),
        Column('gLcNonPeriodic', BLOB, nullable=True),
        Column('rLcNonPeriodic', BLOB, nullable=True),
        Column('iLcNonPeriodic', BLOB, nullable=True),
        Column('zLcNonPeriodic', BLOB, nullable=True),
        Column('yLcNonPeriodic', BLOB, nullable=True),
        Column('nearbyObj1', BIGINT, nullable=True),
        Column('nearbyObj1Dist', FLOAT, nullable=True),
        Column('nearbyObj1LnP', FLOAT, nullable=True),
        Column('nearbyObj2', BIGINT, nullable=True),
        Column('nearbyObj2Dist', FLOAT, nullable=True),
        Column('nearbyObj2LnP', FLOAT, nullable=True),
        Column('nearbyObj3', BIGINT, nullable=True),
        Column('nearbyObj3Dist', FLOAT, nullable=True),
        Column('nearbyObj3LnP', FLOAT, nullable=True),
        Column('flags', BIGINT, nullable=False, default=0),
        Column('htmId20', BIGINT, nullable=False),
        PrimaryKeyConstraint('diaObjectId', 'validityStart', name='PK_DiaObject'),
        Index('IDX_DiaObject_validityStart', 'validityStart'),
        Index('IDX_DiaObject_htmId20', 'htmId20'),
        mysql_engine=mysql_engine)

    diaSource = Table('DiaSource', metadata,
        Column('diaSourceId', BIGINT , nullable=False),
        Column('ccdVisitId', BIGINT , nullable=False),
        Column('diaObjectId', BIGINT , nullable=True),
        Column('ssObjectId', BIGINT , nullable=True),
        Column('parentDiaSourceId', BIGINT , nullable=True),
        Column('filterName', CHAR(1) , nullable=False),
        Column('prv_procOrder', INT , nullable=False),
        Column('ssObjectReassocTime', DATETIME , nullable=True),
        Column('midPointTai', DOUBLE , nullable=False),
        Column('ra', DOUBLE , nullable=False),
        Column('raSigma', FLOAT , nullable=False),
        Column('decl', DOUBLE , nullable=False),
        Column('declSigma', FLOAT , nullable=False),
        Column('ra_decl_Cov', FLOAT , nullable=False),
        Column('x', FLOAT , nullable=False),
        Column('xSigma', FLOAT , nullable=False),
        Column('y', FLOAT , nullable=False),
        Column('ySigma', FLOAT , nullable=False),
        Column('x_y_Cov', FLOAT , nullable=False),
        Column('snr', FLOAT , nullable=False),
        Column('psFlux', FLOAT , nullable=True),
        Column('psFluxSigma', FLOAT , nullable=True),
        Column('psLnL', FLOAT , nullable=True),
        Column('psChi2', FLOAT , nullable=True),
        Column('psN', INT , nullable=True),
        Column('trailFlux', FLOAT , nullable=True),
        Column('trailFluxSigma', FLOAT , nullable=True),
        Column('trailLength', FLOAT , nullable=True),
        Column('trailLengthSigma', FLOAT , nullable=True),
        Column('trailAngle', FLOAT , nullable=True),
        Column('trailAngleSigma', FLOAT , nullable=True),
        Column('trailFlux_trailLength_Cov', FLOAT , nullable=True),
        Column('trailFlux_trailAngle_Cov', FLOAT , nullable=True),
        Column('trailLength_trailAngle_Cov', FLOAT , nullable=True),
        Column('trailLnL', FLOAT , nullable=True),
        Column('trailChi2', FLOAT , nullable=True),
        Column('trailN', INT , nullable=True),
        Column('fpFlux', FLOAT , nullable=True),
        Column('fpFluxSigma', FLOAT , nullable=True),
        Column('diffFlux', FLOAT , nullable=True),
        Column('diffFluxSigma', FLOAT , nullable=True),
        Column('fpSky', FLOAT , nullable=True),
        Column('fpSkySigma', FLOAT , nullable=True),
        Column('E1', FLOAT , nullable=True),
        Column('E1Sigma', FLOAT , nullable=True),
        Column('E2', FLOAT , nullable=True),
        Column('E2Sigma', FLOAT , nullable=True),
        Column('E1_E2_Cov', FLOAT , nullable=True),
        Column('mSum', FLOAT , nullable=True),
        Column('mSumSigma', FLOAT , nullable=True),
        Column('extendedness', FLOAT , nullable=True),
        Column('apMeanSb01', FLOAT , nullable=True),
        Column('apMeanSb01Sigma', FLOAT , nullable=True),
        Column('apMeanSb02', FLOAT , nullable=True),
        Column('apMeanSb02Sigma', FLOAT , nullable=True),
        Column('apMeanSb03', FLOAT , nullable=True),
        Column('apMeanSb03Sigma', FLOAT , nullable=True),
        Column('apMeanSb04', FLOAT , nullable=True),
        Column('apMeanSb04Sigma', FLOAT , nullable=True),
        Column('apMeanSb05', FLOAT , nullable=True),
        Column('apMeanSb05Sigma', FLOAT , nullable=True),
        Column('apMeanSb06', FLOAT , nullable=True),
        Column('apMeanSb06Sigma', FLOAT , nullable=True),
        Column('apMeanSb07', FLOAT , nullable=True),
        Column('apMeanSb07Sigma', FLOAT , nullable=True),
        Column('apMeanSb08', FLOAT , nullable=True),
        Column('apMeanSb08Sigma', FLOAT , nullable=True),
        Column('apMeanSb09', FLOAT , nullable=True),
        Column('apMeanSb09Sigma', FLOAT , nullable=True),
        Column('apMeanSb10', FLOAT , nullable=True),
        Column('apMeanSb10Sigma', FLOAT , nullable=True),
        Column('flags', BIGINT , nullable=False, default=0),
        Column('htmId20', BIGINT , nullable=False),
        PrimaryKeyConstraint('diaSourceId', name='PK_DiaSource'),
        Index('IDX_DiaSource_ccdVisitId', 'ccdVisitId'),
        Index('IDX_DiaSource_diaObjectId', 'diaObjectId'),
        Index('IDX_DiaSource_ssObjectId', 'ssObjectId'),
        Index('IDX_DiaSource_filterName', 'filterName'),
        Index('IDX_DiaObject_htmId20', 'htmId20'),
        mysql_engine=mysql_engine)

    ssObject = Table('SSObject', metadata,
        Column('ssObjectId', BIGINT , nullable=False),
        Column('q', DOUBLE , nullable=True),
        Column('qSigma', DOUBLE , nullable=True),
        Column('e', DOUBLE , nullable=True),
        Column('eSigma', DOUBLE , nullable=True),
        Column('i', DOUBLE , nullable=True),
        Column('iSigma', DOUBLE , nullable=True),
        Column('lan', DOUBLE , nullable=True),
        Column('lanSigma', DOUBLE , nullable=True),
        Column('aop', DOUBLE , nullable=True),
        Column('oepSigma', DOUBLE , nullable=True),
        Column('M', DOUBLE , nullable=True),
        Column('MSigma', DOUBLE , nullable=True),
        Column('epoch', DOUBLE , nullable=True),
        Column('epochSigma', DOUBLE , nullable=True),
        Column('q_e_Cov', DOUBLE , nullable=True),
        Column('q_i_Cov', DOUBLE , nullable=True),
        Column('q_lan_Cov', DOUBLE , nullable=True),
        Column('q_aop_Cov', DOUBLE , nullable=True),
        Column('q_M_Cov', DOUBLE , nullable=True),
        Column('q_epoch_Cov', DOUBLE , nullable=True),
        Column('e_i_Cov', DOUBLE , nullable=True),
        Column('e_lan_Cov', DOUBLE , nullable=True),
        Column('e_aop_Cov', DOUBLE , nullable=True),
        Column('e_M_Cov', DOUBLE , nullable=True),
        Column('e_epoch_Cov', DOUBLE , nullable=True),
        Column('i_lan_Cov', DOUBLE , nullable=True),
        Column('i_aop_Cov', DOUBLE , nullable=True),
        Column('i_M_Cov', DOUBLE , nullable=True),
        Column('i_epoch_Cov', DOUBLE , nullable=True),
        Column('lan_aop_Cov', DOUBLE , nullable=True),
        Column('lan_M_Cov', DOUBLE , nullable=True),
        Column('lan_epoch_Cov', DOUBLE , nullable=True),
        Column('aop_M_Cov', DOUBLE , nullable=True),
        Column('aop_epoch_Cov', DOUBLE , nullable=True),
        Column('M_epoch_Cov', DOUBLE , nullable=True),
        Column('arc', FLOAT , nullable=True),
        Column('orbFitLnL', FLOAT , nullable=True),
        Column('orbFitChi2', FLOAT , nullable=True),
        Column('orbFitN', INTEGER , nullable=True),
        Column('MOID1', FLOAT , nullable=True),
        Column('MOID2', FLOAT , nullable=True),
        Column('moidLon1', DOUBLE , nullable=True),
        Column('moidLon2', DOUBLE , nullable=True),
        Column('uH', FLOAT , nullable=True),
        Column('uHSigma', FLOAT , nullable=True),
        Column('uG1', FLOAT , nullable=True),
        Column('uG1Sigma', FLOAT , nullable=True),
        Column('uG2', FLOAT , nullable=True),
        Column('uG2Sigma', FLOAT , nullable=True),
        Column('gH', FLOAT , nullable=True),
        Column('gHSigma', FLOAT , nullable=True),
        Column('gG1', FLOAT , nullable=True),
        Column('gG1Sigma', FLOAT , nullable=True),
        Column('gG2', FLOAT , nullable=True),
        Column('gG2Sigma', FLOAT , nullable=True),
        Column('rH', FLOAT , nullable=True),
        Column('rHSigma', FLOAT , nullable=True),
        Column('rG1', FLOAT , nullable=True),
        Column('rG1Sigma', FLOAT , nullable=True),
        Column('rG2', FLOAT , nullable=True),
        Column('rG2Sigma', FLOAT , nullable=True),
        Column('iH', FLOAT , nullable=True),
        Column('iHSigma', FLOAT , nullable=True),
        Column('iG1', FLOAT , nullable=True),
        Column('iG1Sigma', FLOAT , nullable=True),
        Column('iG2', FLOAT , nullable=True),
        Column('iG2Sigma', FLOAT , nullable=True),
        Column('zH', FLOAT , nullable=True),
        Column('zHSigma', FLOAT , nullable=True),
        Column('zG1', FLOAT , nullable=True),
        Column('zG1Sigma', FLOAT , nullable=True),
        Column('zG2', FLOAT , nullable=True),
        Column('zG2Sigma', FLOAT , nullable=True),
        Column('yH', FLOAT , nullable=True),
        Column('yHSigma', FLOAT , nullable=True),
        Column('yG1', FLOAT , nullable=True),
        Column('yG1Sigma', FLOAT , nullable=True),
        Column('yG2', FLOAT , nullable=True),
        Column('yG2Sigma', FLOAT , nullable=True),
        Column('flags', BIGINT , nullable=False, default=0),
        PrimaryKeyConstraint('ssObjectId', name='PK_SSObject'),
        mysql_engine=mysql_engine)

    diaForcedSource = Table('DiaForcedSource', metadata,
        Column('diaObjectId', BIGINT , nullable=False),
        Column('ccdVisitId', BIGINT , nullable=False),
        Column('psFlux', FLOAT , nullable=False),
        Column('psFlux_Sigma', FLOAT , nullable=True),
        Column('x', FLOAT , nullable=False),
        Column('y', FLOAT , nullable=False),
        Column('flags', BIGINT , nullable=False, default=0),
        PrimaryKeyConstraint('diaObjectId', 'ccdVisitId', name='PK_DiaForcedSource'),
        Index('IDX_DiaForcedSource_ccdVisitId', 'ccdVisitId'),
        mysql_engine=mysql_engine)

    o2oMatch = Table('DiaObject_To_Object_Match', metadata,
        Column('diaObjectId', BIGINT , nullable=False),
        Column('objectId', BIGINT , nullable=False),
        Column('dist', FLOAT , nullable=False),
        Column('lnP', FLOAT , nullable=True),
        Index('IDX_DiaObjectToObjectMatch_diaObjectId', 'diaObjectId'),
        Index('IDX_DiaObjectToObjectMatch_objectId', 'objectId'),
        mysql_engine=mysql_engine)

    # create all tables (optionally drop first)
    if args.drop:
        logging.info('dropping all tables')
        metadata.drop_all()
    logging.info('creating all tables')
    metadata.create_all()


def make_doube_type(engine):
    """
    DOUBLE type is database-specific, select one based on dialect.
    """
    if engine.name == 'mysql':
        from sqlalchemy.dialects.mysql import DOUBLE
        return DOUBLE(asdecimal=False)
    elif engine.name == 'postgresql':
        from sqlalchemy.dialects.postgresql import DOUBLE_PRECISION
        return DOUBLE_PRECISION
    else:
        raise TypeError('cannot determine DOUBLE type, unexpected dialect: ' + engine.name)


#
#  run application when imported as a main module
#
if __name__ == "__main__":
    rc = main()
    sys.exit(rc)
