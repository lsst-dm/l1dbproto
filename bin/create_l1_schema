#!/bin/env python

"""Script to create prototype schema for L1 tables.

This is based initially on baseline schema from `cat` package, but it may
be modified as prototype evolves.
"""

#--------------------------------
#  Imports of standard modules --
#--------------------------------
from argparse import ArgumentParser
import logging
import sys

#-----------------------------
# Imports for other modules --
#-----------------------------
import lsst.afw.table as afwTable
from lsst.l1dbproto import l1db

#---------------------
# Local definitions --
#---------------------


def _configLogger(verbosity):
    """ configure logging based on verbosity level """

    levels = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    logfmt = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"

    logging.basicConfig(level=levels.get(verbosity, logging.DEBUG), format=logfmt)


#
# Copied from ap_association/dia_object.py
#
def make_minimal_dia_object_schema():
    """ Define and create the minimal schema required for a DIAObject.

    Return
    ------
    lsst.afw.table.schema.schema.Schema
    """

    schema = afwTable.SourceTable.makeMinimalSchema()
    # For the MVP/S we currently only care about the position though
    # in the future we will add summary computations for fluxes etc.
    # as well as their errors.

    # In the future we would like to store a covariance of the coordinate.
    # This functionality is not defined in currently in the stack, so we will
    # hold off until it is implemented. This is to be addressed in DM-7101.
    schema.addField("indexer_id", type="L")
    schema.addField("n_dia_sources", type="L")

    return schema


def make_minimal_dia_source_schema():
    """ Define and create the minimal schema required for a DIASource.

    Return
    ------
    lsst.afw.table.schema.schema.Schema
    """

    schema = afwTable.SourceTable.makeMinimalSchema()

    return schema

#---------------------------------
#  Application class definition --
#---------------------------------

def main():

    descr = 'Create schema for L1 database.'
    parser = ArgumentParser(description=descr)
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='More verbose output, can use several times.')
    parser.add_argument('--drop', action='store_true', default=False,
                        help='Drop existing schema first, this will delete '
                        'all data in the tables, use with extreme caution')
    parser.add_argument('-c', '--config', default="l1db.cfg",
                        help='Name of the config file, def: l1db.cfg')
    parser.add_argument('-a', '--association', default=False,
                        action='store_true',
                        help='Use afw.table schema from ap_association')
    args = parser.parse_args()

    # configure logging
    _configLogger(args.verbose)

    # instantiate db interface
    db = l1db.L1db(args.config)

    schema_dict = None
    if args.association:
        schema_dict = dict(DiaObject=make_minimal_dia_object_schema(),
                           DiaSource=make_minimal_dia_source_schema())

    # do it
    db.makeSchema(schema_dict=schema_dict, drop=args.drop)


#
#  run application when imported as a main module
#
if __name__ == "__main__":
    rc = main()
    sys.exit(rc)
