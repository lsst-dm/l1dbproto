#!/bin/env python

"""Script to create prototype schema for L1 tables.

This is based initially on baseline schema from `cat` package, but it may
be modified as prototype evolves.
"""

#--------------------------------
#  Imports of standard modules --
#--------------------------------
from argparse import ArgumentParser
import logging
import sys

#-----------------------------
# Imports for other modules --
#-----------------------------
import lsst.afw.table as afwTable
from lsst.dax.ppdb import Ppdb, PpdbConfig, make_minimal_dia_object_schema, make_minimal_dia_source_schema

#---------------------
# Local definitions --
#---------------------


def _configLogger(verbosity):
    """ configure logging based on verbosity level """

    levels = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    logfmt = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"

    logging.basicConfig(level=levels.get(verbosity, logging.DEBUG), format=logfmt)


#
# Copied from ap_association/dia_object.py
#---------------------------------
#  Application class definition --
#---------------------------------

def main():

    descr = 'Create schema for Prompt Products Database.'
    parser = ArgumentParser(description=descr)
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='More verbose output, can use several times.')
    parser.add_argument('--drop', action='store_true', default=False,
                        help='Drop existing schema first, this will delete '
                        'all data in the tables, use with extreme caution')
    parser.add_argument('-c', '--config', default=None, metavar='PATH',
                        help='Name of the database config file (pex.config)')
    parser.add_argument('-t', '--tablespace', default=None, metavar='TABLESPACE',
                        help='Name of the Oracle tablespace for new tables.')
    parser.add_argument('-i', '--iot', default=False,
                        action='store_true',
                        help='Make index-organized DiaObjectLast table.')
    parser.add_argument('-a', '--association', default=False,
                        action='store_true',
                        help='Use afw.table schema from ap_association')
    args = parser.parse_args()

    # configure logging
    _configLogger(args.verbose)

    config = PpdbConfig()
    if args.config:
        config.load(args.config)

    afw_schemas = None
    if args.association:
        afw_schemas = dict(DiaObject=make_minimal_dia_object_schema(),
                           DiaSource=make_minimal_dia_source_schema())

    # instantiate db interface
    db = Ppdb(config=config, afw_schemas=afw_schemas)

    # do it
    db.makeSchema(drop=args.drop, oracle_tablespace=args.tablespace, oracle_iot=args.iot)


#
#  run application when imported as a main module
#
if __name__ == "__main__":
    rc = main()
    sys.exit(rc)
